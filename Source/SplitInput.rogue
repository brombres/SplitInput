#================================================================================
# SplitInput.rogue
# July 17, 2023
#================================================================================

$define VERSION "1.0"
$define DATE    "July 17, 2023"

$requireRogue "2.25"

uses Console/CommandLineParser

try
  SplitInput( System.command_line_arguments )
catch (error:Error)
  Console.error.println error
  System.exit 1
endTry

class SplitInput
  PROPERTIES
    pattern   = " "
    exact     = false
    outfile   : File?
    from      = 0
    count     = -1
    from_tail = false
    trim      = false

  METHODS
    method init( args:String[] )
      local command = parse_args( args )

      if (command//options//help)
        print_usage
        System.exit 0
      endIf

      pattern = command//options//pattern
      exact = command//options.contains("exact")
      trim  = command//options.contains("trim")

      if (command//options//from)
        from = command//options//from->Int32 - 1
      endIf

      if (command//options//count)
        count = command//options//count->Int32
      endIf

      if (command//options//tail)
        count = command//options//tail->Int32
        from_tail = true
      endIf

      if (command//options//output)
        outfile = File( command//options//output->String )
      endIf

      local results = String[]
      if (command//args.count)
        forEach (arg in command//args)
          local file = File( arg->String )
          if (not file.exists)
            error.println "[splitinput] ERROR - File does not exist: $"(file)
          elseIf (file.is_folder)
            error.println "[splitinput] ERROR - '$' is a folder."(file)
          else
            split( String(file), results )
          endIf
        endForEach
      else
        forEach (line in LineReader(Console))
          split( line, results )
        endForEach
      endIf

      if (from_tail)
        count .= clamped_high( results.count )
        forEach (result in results from results.count-count)
          if (trim) result .= trimmed
          println result
        endForEach
      else
        if (count == -1) count = results.count - from
        else             count .= clamped_high( results.count - from )
        forEach (i in from..(from+count-1))
          if (trim) println results[i].trimmed
          else      println results[i]
        endForEach
      endIf

    method split( line:String, results:String[] )
      local i1 = 0
      local prev_span : Span?
      while (i1 < line.count)
        if local span = line.locate_pattern( pattern, i1 )
          if (exact)
            results.add line.substring( i1, span.index-i1 )
            i1 = span.limit
          else
            if (prev_span)
              if (prev_span.value.limit == span.index)
                # merge adjacent split points into single split point
                prev_span = Span( prev_span.value.index, prev_span.value.count + span.count )
              else
                results.add line.substring( i1, span.index-i1 )
                prev_span = span
              endIf
            else
              results.add line.substring( i1, span.index-i1 )
              prev_span = span
            endIf
            i1 = span.limit
          endIf
        else
          escapeWhile
        endIf
      endWhile

      if (prev_span)
        results.add line.from( prev_span.value.limit )
      else
        results.add line.from( i1 )
      endIf

    method parse_args( args:String[] )->Value
      local command = CommandLineParser().
      [
        option( "--count=",   &alias="-n" )
        option( "--exact",    &alias="-e" )
        option( "--from=",    &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--output=",  &alias="-o" )
        option( "--pattern=", &alias="-p", &default=" " )
        option( "--tail=",    &alias="-t" )
        option( "--trim",     &alias="-m" )
      ].parse( args )
      return command

    method print_usage
      println "SplitInput v$"(VERSION)
      println "$ by Brom Bresenham"(DATE)
      println

      println @|USAGE
               |  splitinput [OPTIONS] [FILEPATHS]
               |
               |OPTIONS
               |  --count=<N>, -n <N>
               |    Display the N lines of result from the beginning or from the '--from' option. Ignored if
               |    '--tail' is specified. Example:
               |    'echo "alpha bravo charlie delta" | splitinput --count=2' -> "alpha|bravo"
               |
               |  --exact, -e
               |    Normally multiple sequential patterns are counted as a single instance of the pattern, e.g.
               |    multiple spaces count as a single split point. '--exact' makes each instance of the pattern a
               |    separate split point. Furthermore, the '--pattern' is treated as a literal string rather than a
               |    Rogue string pattern.
               |
               |  --from=<N>, -f <N>
               |    Display the output starting with the Nth result. For example:
               |    'echo "alpha bravo charlie delta" | splitinput --from=2' -> "bravo|charlie|delta"
               |    Ignored if '--tail' is specified.
               |
               |  --help, -h, -?
               |    Show this help text.
               |
               |  --output=<filepath>, -p <filepath>
               |    Saves the output in the specified filepath. If no '--output' is specified then the output prints
               |    to stdout.
               |
               |  --pattern=<string>, -p <string> [default:' ']
               |    Specifies the split point pattern. This is a basic Rogue string pattern rather than a regular
               |    expression:
               |      *    - Matches any number of characters.
               |      ?    - Matches any single character.
               |      $(I) - Matches an integer character sequence.
               |      $(R) - Matches a real number character sequence.
               |      $(#) - Matches a single digit 0-9
               |      $($) - Matches a single literal '$'.
               |      ' '  - A space matches 1 or more spaces and tabs.
               |    NOTE: use 'single quotes' to turn off the special meaning of '$' characters in the shell.
               |
               |  --tail=<N>, -t <N>
               |    Displays the last N lines of output. Overrides '--count' and '--from' options.
               |    'echo "alpha bravo charlie delta" | splitinput --tail=2' -> "charlie|delta"
               |
               |  --trim, -m
               |    Trims beginning and ending whitespace from each output line.
               |    'echo "1. 2.3" | splitinput'        -> "1| 2|3"
               |    'echo "1. 2.3" | splitinput --trim' -> "1|2|3"
               |
               |DESCRIPTION
               |  - Splits each line of input around an arbitrary pattern into multiple output lines.
               |  - If no filepaths are given then the standard input is used.
               |  - A [SPACE] is used as the default pattern.
endClass
